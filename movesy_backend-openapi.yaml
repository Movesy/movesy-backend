openapi: "3.0.3"
info:
  title: "Movesy API"
  description: "Movesy project API documentation"
  version: "1.0.0"
servers:
  - url: "https://movesy.herokuapp.com"
paths :
 /authenticate:
  post:
    summary: "authenticate an user"
    operationId: "createAuthenticationToken"
    responses:
      "200":
        description: "A JwtResponse object"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JwtResponse'
    requestBody:
      $ref: '#/components/schemas/JwtRequest'
 /diary:
  get:
    summary: "GET diary"
    operationId: "diary"
    responses:
      "200":
        description: "OK"
 /offer/:
  get:
    summary: "GET an offer by PackageId"
    operationId: "getOffersByPackageID"
    parameters:
      - name: "id"
        in: "query"
        required: true
        schema:
          type: "string"
    responses:
      "200":
        description: "OK"
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Offer'
      "404":
        description: "Not found"
 /offer/accept/:
  delete:
    summary: "Accept an offer(Delete the remaining ones)"
    operationId: "acceptOffer"
    parameters:
      - name: "id"
        in: "query"
        required: true
        schema:
          type: "string"
    responses:
      "204":
        description: "No Content"
      "500":
        description: "Internal Server Error"

 /offer/create:
  post:
    summary: "POST create an offer"
    operationId: "createOffer"
    responses:
      "200":
        description: "OK"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Offer'
      "500":
        description: "Internal Server Error"
    requestBody:
      $ref: '#/components/schemas/Offer'

 /offer/delete/:
  delete:
    summary: "DELETE an offer by ID"
    operationId: "deleteOffer"
    parameters:
      - name: "id"
        in: "query"
        required: true
        schema:
          type: "string"
    responses:
      "201":
        description: "No Content"
      "500":
        description: "Internal Server Error"

 /offer/edit/:
  put:
    summary: "Edit an offer "
    operationId: "updateOffer"
    responses:
      "200":
        description: "OK"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Offer'
      "404":
        description: "Not Found"
    requestBody:
      $ref: '#/components/schemas/Offer'

 /offer/reject/:
  delete:
    summary: "Reject an offer"
    operationId: "rejectOffer"
    parameters:
      - name: "id"
        in: "query"
        required: true
        schema:
          type: "string"
    responses:
      "201":
        description: "No Content"
      "500":
        description: "Internal Server Error"
 /offer/transfer:
  put:
    summary: "Transfer a package from a transporter to another"
    operationId: "transferPackage"
    parameters:
      - name: "offerID"
        in: "query"
        required: true
        schema:
          type: "string"
      - name: "newTransporterID"
        in: "query"
        required: true
        schema:
          type: "string"
    responses:
      "200":
        description: "OK"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Offer'
      "500":
        description: "Internal Server Error"
 /package/:
  get:
    summary: "GET a package by ID"
    operationId: "getPackageById"
    parameters:
      - name: "id"
        in: "query"
        required: true
        schema:
          type: "string"
    responses:
      "200":
        description: "OK"

 /package/create:
  post:
    summary: "Create a package"
    operationId: "createPackage"
    responses:
      "200":
        description: "OK"

 /package/delete/:
  delete:
    summary: "DELETE a package by ID "
    operationId: "deletePackage"
    parameters:
      - name: "id"
        in: "query"
        required: true
        schema:
          type: "string"
    responses:
      "200":
        description: "OK"

 /package/edit/:
  put:
    summary: "Edit a package"
    operationId: "updatePackage"
    responses:
      "200":
        description: "OK"

 /package/list:
  get:
    summary: "GET all package"
    operationId: "getAllPackages"
    responses:
      "200":
        description: "OK"

 /package/transporter/:
  get:
    summary: "GET all package by transporter(Which belongs to him)"
    operationId: "getPackagesByTransporter"
    parameters:
      - name: "id"
        in: "query"
        required: true
        schema:
          type: "string"
    responses:
      "200":
        description: "OK"

 /package/user/:
  get:
    summary: "GET all package by User(Which belongs to him)"
    operationId: "getPackagesByUser"
    parameters:
      - name: "id"
        in: "query"
        required: true
        schema:
          type: "string"
    responses:
      "200":
        description: "OK"

 /register:
  post:
    summary: "Register an user to the system"
    operationId: "saveUser"
    responses:
      "200":
        description: "OK"

 /review/:
  get:
    summary: "GET a review by packageId"
    operationId: "getReviewByPackageId"
    parameters:
      - name: "id"
        in: "query"
        required: true
        schema:
          type: "string"
    responses:
      "200":
        description: "OK"

 /review/create:
  post:
    summary: "Create a review"
    operationId: "createReview"
    responses:
      "200":
        description: "OK"

 /review/delete/:
  delete:
    summary: "DELETE a review by Id"
    operationId: "deleteReview"
    parameters:
      - name: "id"
        in: "query"
        required: true
        schema:
          type: "string"
    responses:
      "200":
        description: "OK"

 /review/edit/:
  put:
    summary: "Edit a review by ID"
    operationId: "editReviewById"
    responses:
      "200":
        description: "OK"

 /review/transporter/:
  get:
    summary: "Get all review by Transporter(Which belongs to him)"
    operationId: "getReviewsByTransporter"
    parameters:
      - name: "id"
        in: "query"
        required: true
        schema:
          type: "string"
    responses:
      "200":
        description: "OK"

 /user/:
  get:
    summary: "GET an user by ID"
    operationId: "getUserById"
    parameters:
      - name: "id"
        in: "query"
        required: true
        schema:
          type: "string"
    responses:
      "200":
        description: "OK"

 /user/delete/:
  delete:
    summary: "DELETE an User"
    operationId: "deleteUser"
    parameters:
      - name: "id"
        in: "query"
        required: true
        schema:
          type: "string"
    responses:
      "200":
        description: "OK"

 /user/edit/:
  put:
    summary: "Edit a user"
    operationId: "updateUser"
    responses:
      "200":
        description: "OK"

 /user/list:
  get:
    summary: "GET all user"
    operationId: "getAllUsers"
    responses:
      "200":
        description: "OK"
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        password:
          type: string
        email:
          type: string
        telephone:
          type: string
        size:
          $ref: '#/components/schemas/Size'
        role:
          $ref: '#/components/schemas/Role'
    Package:
      type: object
      properties:
        id:
          type: string
        userID:
          type: string
        transporterID:
          type: string
        from:
          $ref: '#/components/schemas/Location'
        to:
          $ref: '#/components/schemas/Location'
        creation date:
          type: string
          format : date
        deadline:
          type: string
          format : date
        price:
          type: integer
        weight:
          type: integer
        size:
          $ref: '#/components/schemas/Size'
        status:
          $ref: '#/components/schemas/status'
    Review:
      type: object
      properties:
        id:
          type: string
        transporterID:
          type: string
        packageID:
          type: string
        time:
          type: string
          format: date
        rating:
          type: integer
        description:
          type: string
        CustomerUsername:
          type: string
    Offer:
      type: object
      properties:
        id:
          type: string
        transporterID:
          type: string
        packageID:
          type: string
        price:
          type: integer
    Location:
      type: object
      properties:
        longitude:
          type: number
        latitude:
          type: number
        address:
          type: string
    Size :
      type: string
      enum:
        - SMALL
        - MEDIUM
        - LARGE
        - HUGE
    Status :
      type: string
      enum:
        - SENT
        - IN_TRANSIT
        - DELIVERED
        - WAITING_FOR_REVIEW
    JwtResponse:
      type: object
      properties:
        jwtToken:
          type: string
        user:
          $ref: '#/components/schemas/User'
    JwtRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    Role:
      type: string
      enum:
        - ADMIN
        - USER
        - TRANSPORTER
